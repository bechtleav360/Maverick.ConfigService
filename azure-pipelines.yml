# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)_$(Rev:rrrr)

variables:
  - group: Docker Maverick
  - name: buildConfiguration
    value: 'Release'
  - name: buildRuntime
    value: 'win10-x64'
  - name: netcoreSdkVersion
    value: '3.1.x'
  - name: buildRevision
    value: $[counter(format('{0}-{1}', variables['Build.Repository.Name'], variables['Build.SourceBranchName']), 1)]
  # Helm
  - name: chartPath
    value: deploy
  - name: chartName
    value: config
  # Service
  - name: projectLocation
    value: src/Bechtle.A365.ConfigService
  - name: projectFile
    value: Bechtle.A365.ConfigService.csproj
  - name: containerName
    value: configservice
  # Cli
  - name: projectLocationCli
    value: src/Bechtle.A365.ConfigService.Cli
  - name: projectFileCli
    value: Bechtle.A365.ConfigService.Cli.csproj
  - name: containerNameCli
    value: configservice-cli

trigger:
  branches:
    include:
      - master
      - develop
  paths:
    exclude:
      - azure-pipelines.yml

resources:
  repositories:
    - repository: templates
      type: git
      name: A365/PipelineTemplates

stages:
  - stage: Build
    jobs:
      - job: Application
        pool: 'A365VSTS'
        steps:
        # make sure to use the proper SDK
        - task: UseDotNet@2
          displayName: 'use DotnetCore-SDK "$(netcoreSdkVersion)"'
          inputs:
            packageType: 'sdk'
            version: '$(netcoreSdkVersion)'

        # build Service
        - template: build-project.yaml@templates
          parameters:
            projectLocation: $(projectLocation)
            projectFile: $(projectFile)
            executeTests: false

        # build CLI
        - template: build-project.yaml@templates
          parameters:
            projectLocation: $(projectLocationCli)
            projectFile: $(projectFileCli)
            projectName: 'Cli'
            buildArguments: '-r $(buildRuntime)'
            executeTests: false

        # build and execute test-project
        - template: build-and-exec-unit-tests.yaml@templates

        # publish the release-binaries back to AzureDevOps
        - task: PublishBuildArtifacts@1
          displayName: 'publish binaries to Azure Pipelines'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'binaries'
            publishLocation: 'Container'

      - job: Docker
        pool: 'Docker'
        steps:

        # build Service
        - template: build-project-container.yaml@templates
          parameters:
            projectLocation: '$(Build.SourcesDirectory)/$(projectLocation)'
            projectFile: $(projectFile)
            containerName: '$(containerRepo)/$(containerName)'
            pat: '$(System.AccessToken)'
            publicRegistry: $(publicRegistry)
            privateRegistry: $(privateRegistry)

        # build Cli
        - template: build-project-container.yaml@templates
          parameters:
            projectName: 'Cli'
            projectLocation: '$(Build.SourcesDirectory)/$(projectLocationCli)'
            projectFile: $(projectFileCli)
            containerName: '$(containerRepo)/$(containerNameCli)'
            pat: '$(System.AccessToken)'
            publicRegistry: $(publicRegistry)
            privateRegistry: $(privateRegistry)

        # build Helm
        - task: ArchiveFiles@2
          displayName: Compress export_presales.json
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)/deploy/config/configuration/export_presales.json'
            includeRootFolder: false
            archiveType: 'tar'
            archiveFile: '$(Build.SourceDirectory)/deploy/config/configuration/configuration.tar.gz'
            replaceExistingArchive: true

        - template: build-helm-chart.yaml@templates
          parameters:
            projectFilePath: '$(Build.SourcesDirectory)/$(projectLocation)/$(projectFile)'
            chartBasePath: $(chartPath)
            chartName: $(chartName)
