apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "app.fullname" . }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: service
    {{- if .Values.app.labels }}
    {{- include "common.tplvalues.render" (dict "value" .Values.app.labels "context" $) | nindent 4 }}
    {{- end }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.app.replicaCount }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: service
  {{- if .Values.app.updateStrategy }}
  strategy: {{ toYaml .Values.app.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: service
        {{- if .Values.app.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.app.podLabels "context" $) | nindent 8 }}
        {{- end }}
      {{- if or .Values.app.podAnnotations (and .Values.metrics.enabled .Values.metrics.annotations) }}
      annotations:
      {{- if .Values.app.podAnnotations }}
      {{- include "common.tplvalues.render" (dict "value" .Values.app.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      {{- if and .Values.metrics.enabled .Values.metrics.annotations }}
      {{- include "common.tplvalues.render" (dict "value" .Values.metrics.annotations "context" $) | nindent 8 }}
      {{- end }}
      {{- end }}
    spec:
      {{- include "app.images.pullSecrets" . | nindent 6 -}}
      {{- if .Values.app.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.app.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.app.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.app.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.app.podAffinityPreset "component" "config" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.app.podAntiAffinityPreset "component" "config" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.app.nodeAffinityPreset.type "key" .Values.app.nodeAffinityPreset.key "values" .Values.app.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.app.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.app.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.app.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.app.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.app.priorityClassName }}
      priorityClassName: {{ .Values.app.priorityClassName }}
      {{- end }}
      {{- if .Values.app.securityContext.enabled }}
      securityContext: {{- omit .Values.app.securityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.enabled }}
      serviceAccountName: {{ default (include "common.names.fullname" . ) .Values.serviceAccount.name}}
      {{- end }}
      initContainers:
        - name: init-eventstore
          image: {{ include "curl.image" . }}
          imagePullPolicy: {{ .Values.curlImage.pullPolicy | quote }}
          command: ['sh', '-c', 'until curl http://{{- .Values.app.eventstore.server -}}:2113 -u "{{- .Values.app.eventstore.user -}}:{{- .Values.app.eventstore.password -}}"; do echo waiting for eventstore; sleep 2; done;']
      {{- if eq .Values.app.snapshotstore.type "postgres" -}}
        - name: init-postgres
          image: {{ include "postgre.image" . }}
          imagePullPolicy: {{ .Values.postgreImage.pullPolicy | quote }}
          command: ['sh', '-c', 'until pg_isready -h {{- .Values.app.snapshotstore.server -}} -p {{- .Values.app.snapshotstore.port -}}; do echo waiting for postgres; sleep 2; done;']
      {{- end -}}
      {{- if or .Values.app.extraInitContainers -}}
      {{- include "common.tplvalues.render" ( dict "value" (coalesce .Values.app.extraInitContainers ) "context" $ ) | nindent 8 -}}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- if .Values.app.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.app.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.app.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.app.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.app.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.app.args "context" $) | nindent 12 }}
          {{- end }}
          image: {{ include "app.image" . }}
          imagePullPolicy: {{ .Values.appImage.pullPolicy | quote }}
          {{- if .Values.app.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.app.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          env:
            - name: ASPNETCORE_URLS
              value: http://*:8080
            - name: EventstoreConnection__Uri
              value: {{ printf "tcp://%s:%s@%s:1113" .Values.app.eventstore.username .Values.app.eventstore.password .Values.app.eventstore.server }}
            {{- if .Values.app.redis.server }}
            - name: MemoryCache__Redis__Connectionstring
              value: {{ printf "%s:6379,password=%s" .Values.app.redis.server .Values.app.redis.password }}
            {{- end }}
            - name: EventBusConnection__Server
              value: {{ printf "http://%s" .Values.app.eventbus.server }}
            - name: MemoryCache__Local__SizeLimitInMb
              value: "64"
            - name: MemoryCache__Local__Duration
              value: "00:05:00"
            {{- if eq .Values.app.snapshotstore.type "postgres" }}
            - name: SnapshotConfiguration__Stores__Postgres__Enabled
              value: "true"
            - name: SnapshotConfiguration__Stores__Postgres__ConnectionString
              value: {{ printf "Host=%s;Database=ConfigProjection;Port=%s;Id=%s;Password=%s;" .Values.app.snapshotstore.server .Values.app.snapshotstore.port .Values.app.snapshotstore.user .Values.app.snapshotstore.password }}
            {{- else if eq .Values.app.snapshotstore.type "local" }}
            - name: SnapshotConfiguration__Stores__Local__Enabled
              value: "true"
            {{- else if eq .Values.app.snapshotstore.type "memory" }}
            - name: SnapshotConfiguration__Stores__Memory__Enabled
              value: "true"
            {{- else }}
            - name: SnapshotConfiguration__Stores__Void__Enabled
              value: "true"
            {{- end }}
            - name: LoggingConfiguration__NLog__Rules__0__writeTo
              value: "blackhole"
            {{- if .Values.app.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.app.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.app.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.app.extraEnvVarsCM }}
            {{- end }}
            {{- if .Values.app.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.app.extraEnvVarsSecret }}
            {{- end }}
          ports:
          - name: http
            containerPort: 8080
            protocol: TCP
          {{- if .Values.app.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - bash
                - -ec
                - 'curl http://localhost:8080/swagger/index.html'
            initialDelaySeconds: {{ .Values.app.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.app.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.app.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.app.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.app.livenessProbe.failureThreshold }}
          {{- else if .Values.app.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.app.customLivenessProbe "context" $) | nindent 10 }}
          {{- end }}
          {{- if .Values.app.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
                - 'curl http://localhost:8080/swagger/index.html'
            initialDelaySeconds: {{ .Values.app.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.app.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.app.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.app.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.app.readinessProbe.failureThreshold }}
          {{- else if .Values.app.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.app.customReadinessProbe "context" $) | nindent 10 }}
          {{- end }}
          {{- if .Values.app.resources }}
          resources: {{- toYaml .Values.app.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if .Values.app.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.app.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
      volumes:
        {{- if .Values.app.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.app.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
      restartPolicy: Always